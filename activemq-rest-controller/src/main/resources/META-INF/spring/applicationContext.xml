<?xml version="1.0" encoding="UTF-8"?>
<!--
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~    http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:camel-cxf="http://camel.apache.org/schema/cxf"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
                           http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
                           http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
                           http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
                           http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

  <bean id="bridgePropertyPlaceholder" class="org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <value>classpath:org.jboss.examples.activemq.controller.properties</value>
        <value>file:../org.jboss.examples.activemq.controller.properties</value>
      </list>
    </property>
    <property name="ignoreResourceNotFound" value="true"/>
    <property name="searchSystemEnvironment" value="true"/>
    <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
  </bean>
  
  <jdbc:embedded-database id="dataSource" type="DERBY">
    <jdbc:script location="classpath:init.sql"/>
  </jdbc:embedded-database>
  
  <bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
    <property name="brokerURL" value="${activemq.brokerUrl}"/>
    <property name="redeliveryPolicy" ref="redeliveryPolicy"/>
  </bean>
  
  <bean id="redeliveryPolicy" class="org.apache.activemq.RedeliveryPolicy">
    <property name="maximumRedeliveries" value="${activemq.maximumRedeliveries}"/>
    <property name="initialRedeliveryDelay" value="${activemq.redeliveryDelay}"/>
    <property name="redeliveryDelay" value="${activemq.redeliveryDelay}"/>
  </bean>
  
  <bean id="jsonProvider" class="org.codehaus.jackson.jaxrs.JacksonJsonProvider"/>
  
  <util:list id="cxfrsProviders">
    <ref bean="jsonProvider"/>
  </util:list>

  <camel-cxf:rsServer id="messageProducer" 
                      address="${messageProducer.address}"
                      serviceClass="org.jboss.examples.activemq.jaxrs.MessageProducer">
    <camel-cxf:providers>
      <ref bean="jsonProvider"/>
    </camel-cxf:providers>
  </camel-cxf:rsServer>

  <camel-cxf:rsServer id="messagingRegistrar" 
                      address="${messagingRegistrar.address}"
                      serviceClass="org.jboss.examples.activemq.jaxrs.MessagingRegistrar">
    <camel-cxf:providers>
      <ref bean="jsonProvider"/>
    </camel-cxf:providers>
  </camel-cxf:rsServer>
  
  <bean id="jmsHeaderProcessor" class="org.jboss.examples.activemq.controller.JmsHeaderProcessor"/>
  
  <bean id="namingHelper" class="org.jboss.examples.activemq.controller.NamingHelper"/>
  
  <bean id="jsonHelper" class="org.jboss.examples.activemq.controller.JsonHelper"/>

  <bean id="camelHelper" class="org.jboss.examples.activemq.controller.CamelHelper">
    <property name="namingHelper" ref="namingHelper"/>
    <property name="jsonHelper" ref="jsonHelper"/>
    <property name="camelContext" ref="controllerCamelContext"/>
    <property name="connectionFactory" ref="connectionFactory"/>
  </bean>

  <bean id="activemqHelper" class="org.jboss.examples.activemq.controller.ActiveMQHelper">
    <property name="namingHelper" ref="namingHelper"/>
    <property name="brokerService" ref="broker"/>
  </bean>
  
  <bean id="sqlHelper" class="org.jboss.examples.activemq.controller.SqlHelper">
    <property name="jsonHelper" ref="jsonHelper"/>
  </bean>

  <bean id="messagingRegistrarHelper" class="org.jboss.examples.activemq.controller.MessagingRegistrarHelper"/>
  
  <bean id="useLatestEnrichmentStrategy" class="org.apache.camel.processor.aggregate.UseLatestAggregationStrategy"/>
  
  <bean id="useOriginalEnrichmentStrategy" class="org.apache.camel.processor.aggregate.UseOriginalAggregationStrategy"/>
  
  <bean id="synchronizationRecordCountEnrichmentStrategy" class="org.jboss.examples.activemq.controller.MessageHeaderEnrichmentStrategy">
    <property name="headerName" value="SynchronizationRecordCount"/>
  </bean>
  
  <camelContext id="controllerCamelContext" 
                trace="false" 
                xmlns="http://camel.apache.org/schema/spring">
    
    <route id="messageProducerRoute">
      <from uri="cxfrs:bean:messageProducer"/>
      <routingSlip>
        <simple>direct:messageProducer.${headers[operationName]}</simple>
      </routingSlip>
    </route>
    
    <route id="messageProducerSendRoute">
      <from uri="direct:messageProducer.send"/>
      <removeHeaders pattern=".*"/>
      <process ref="jmsHeaderProcessor"/>
      <setHeader headerName="CamelJmsDestinationName">
        <simple>VirtualTopic.${body[0]}</simple>
      </setHeader>
      <setBody>
        <simple>${body[1]}</simple>
      </setBody>
      <marshal>
        <json library="Jackson"/>
      </marshal>
      <to uri="activemq:topic:dummy?connectionFactory=#connectionFactory&amp;timeToLive={{messageProducer.timeToLive}}" pattern="InOnly"/>
      <setBody>
        <simple>${null}</simple>
      </setBody>
    </route>

    <route id="messagingRegistrarRoute">
      <from uri="cxfrs:bean:messagingRegistrar"/>
      <routingSlip>
        <simple>direct:messagingRegistrar.${headers[operationName]}</simple>
      </routingSlip>
    </route>
    
    <route id="messagingRegistrarSubscribeRoute">
      <from uri="direct:messagingRegistrar.subscribe"/>
      <filter>
        <spel>#{@camelHelper.consumerCamelRouteExists(body[0], body[1])}</spel>
        <log message="Subscription already exists for subscriberId: [${body[0]}], and destination: [${body[1]}]."/>
        <bean ref="messagingRegistrarHelper" method="createSubscribeResponse()"/>
        <stop/>
      </filter>
      <enrich strategyRef="useOriginalEnrichmentStrategy">
        <constant>direct:insertSynchronizationRecord</constant>
      </enrich>
      <bean ref="camelHelper" method="addConsumerCamelRoutes(${body[0]}, ${body[1]}, ${body[2].selector}, ${body[2].url})"/>
      <bean ref="messagingRegistrarHelper" method="createSubscribeResponse()"/>
    </route>
    
    <route id="synchronizationInsertRecordRoute">
      <from uri="direct:insertSynchronizationRecord"/>
      <enrich strategyRef="synchronizationRecordCountEnrichmentStrategy">
        <constant>direct:countInsertSynchronizationRecords</constant>
      </enrich>
      <filter>
        <simple>${headers[SynchronizationRecordCount]} &lt;= 1</simple>
        <bean ref="sqlHelper" method="createInsertRecordRequest(${body[0]}, ${body[1]}, ${body[2]})"/>
        <to uri="sql:insert into subscriptions values (#,#,#)?dataSource=#dataSource"/>
        <stop/>
      </filter>
    </route>
    
    <route id="synchronizationInsertCountRecordRoute">
      <from uri="direct:countInsertSynchronizationRecords"/>
      <bean ref="sqlHelper" method="createCountRecordRequest(${body[0]}, ${body[1]})"/>
      <to uri="sql:select count(*) from subscriptions where subscriber_id=# and destination=#?dataSource=#dataSource&amp;outputType=SelectOne&amp;outputHeader=SynchronizationRecordCount"/>
    </route>
    
    <route id="messagingRegistrarUnsubscribeRoute">
      <from uri="direct:messagingRegistrar.unsubscribe"/>
      <filter>
        <spel>#{!@camelHelper.consumerCamelRouteExists(body[0], body[1])}</spel>
        <log message="No subscription exists for subscriberId: [${body[0]}], and destination: [${body[1]}]."/>
        <bean ref="messagingRegistrarHelper" method="createSubscribeResponse()"/>
        <stop/>
      </filter>
      <enrich strategyRef="useOriginalEnrichmentStrategy">
        <constant>direct:deleteSynchronizationRecord</constant>
      </enrich>
      <bean ref="camelHelper" method="removeConsumerCamelRoutes(${body[0]}, ${body[1]})"/>
      <bean ref="activemqHelper" method="removeConsumerQueues(${body[0]}, ${body[1]})"/>
      <bean ref="messagingRegistrarHelper" method="createSubscribeResponse()"/>
    </route>
    
    <route id="synchronizationDeleteRecordRoute">
      <from uri="direct:deleteSynchronizationRecord"/>
      <bean ref="sqlHelper" method="createDeleteRecordRequest(${body[0]}, ${body[1]})"/>
      <to uri="sql:delete from subscriptions where subscriber_id=# and destination=#?dataSource=#dataSource"/>
    </route>
    
    <route id="messagingRegistrarListRoute">
      <from uri="direct:messagingRegistrar.list"/>
      <bean ref="camelHelper" method="getSubscriptionInfo(${body[0]}, ${body[1]})"/>
      <bean ref="messagingRegistrarHelper" method="createListResponse(${body})"/>
    </route>
    
    <route id="messagingRegistrarListAllRoute">
      <from uri="direct:messagingRegistrar.listAll"/>
      <bean ref="camelHelper" method="getSubscriptionInfo(${body[0]})"/>
      <bean ref="messagingRegistrarHelper" method="createListAllResponse(${body})"/>
    </route>

    <route id="synchronizationRoute" startupOrder="2147483647">
      <from uri="timer:synchronization?period={{synchronization.period}}"/>
      <enrich strategyRef="useLatestEnrichmentStrategy">
        <constant>sql:select * from subscriptions?dataSource=#dataSource</constant>
      </enrich>
      <split>
        <simple>${body}</simple>
        <filter>
          <spel>#{!@camelHelper.consumerCamelRouteExists(body['subscriber_id'], body['destination'])}</spel>
          <bean ref="sqlHelper" method="createSubscribeRequest(${body})"/>
          <to uri="direct:messagingRegistrar.subscribe"/>
        </filter>
      </split>
      <bean ref="camelHelper" method="getSubscriptionInfo()"/>
      <split>
        <simple>${body}</simple>
        <enrich strategyRef="synchronizationRecordCountEnrichmentStrategy">
          <constant>direct:countSynchronizationRecords</constant>
        </enrich>
        <filter>
          <simple>${headers[SynchronizationRecordCount]} &lt;= 1</simple>
          <bean ref="sqlHelper" method="createUnsubscribeRequest(${body})"/>
          <to uri="direct:messagingRegistrar.unsubscribe"/>
          <stop/>
        </filter>
      </split>
    </route>
    
    <route id="synchronizationCountRecordRoute">
      <from uri="direct:countSynchronizationRecords"/>
      <bean ref="sqlHelper" method="createCountRecordRequest(${body.subscriberId}, ${body.destination})"/>
      <to uri="sql:select count(*) from subscriptions where subscriber_id=# and destination=#?dataSource=#dataSource&amp;outputType=SelectOne&amp;outputHeader=SynchronizationRecordCount"/>
    </route>

  </camelContext>
  
  <broker id="broker" 
          brokerName="${activemq.brokerName}" 
          dataDirectory="${activemq.dataDirectory}" 
          xmlns="http://activemq.apache.org/schema/core">
    
    <destinationPolicy>
      <policyMap>
        <policyEntries>
          <policyEntry topic=">" producerFlowControl="true">
            <pendingMessageLimitStrategy>
              <constantPendingMessageLimitStrategy limit="1000"/>
            </pendingMessageLimitStrategy>
          </policyEntry>
          <policyEntry queue=">" producerFlowControl="true" memoryLimit="1mb"/>
          <policyEntry queue="Consumer.*.VirtualTopic.>">
            <deadLetterStrategy>
              <individualDeadLetterStrategy queuePrefix="DLQ." useQueueForQueueMessages="true"/>
            </deadLetterStrategy>
          </policyEntry>
        </policyEntries>
      </policyMap>
    </destinationPolicy>

    <destinationInterceptors>
      <virtualDestinationInterceptor>
        <virtualDestinations>
          <virtualTopic name="VirtualTopic.>" selectorAware="true"/>
        </virtualDestinations>
      </virtualDestinationInterceptor>
    </destinationInterceptors>

    <managementContext>
      <managementContext createConnector="false"/>
    </managementContext>

    <persistenceAdapter>
      <kahaDB directory="${activemq.dataDirectory}/kahadb"/>
    </persistenceAdapter>

    <systemUsage>
      <systemUsage>
        <memoryUsage>
          <memoryUsage percentOfJvmHeap="70"/>
        </memoryUsage>
        <storeUsage>
          <storeUsage limit="100 gb"/>
        </storeUsage>
        <tempUsage>
          <tempUsage limit="50 gb"/>
        </tempUsage>
      </systemUsage>
    </systemUsage>

  </broker>

</beans>
